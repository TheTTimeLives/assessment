package com.gormless.programmingexercise.model; // Package declaration to organize the code and ensure its unique location within the project structure.

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue; // Imports the GeneratedValue annotation to specify the generation strategy for the primary key values.
import jakarta.persistence.GenerationType; // Imports the GenerationType enumeration, which specifies the types of primary key generation strategies.
import jakarta.persistence.Id; // Imports the Id annotation, indicating the primary key of the entity.

import java.math.BigDecimal; // Imports the BigDecimal class, providing precise control over decimal numbers, useful for representing prices.
@Entity
public class Product {
    @Id // Marks the id field as the primary key of the entity.
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Configures the primary key to be generated by the database automatically upon insert, using the database's identity column mechanism.
    private Long id; // The unique identifier for each product. It's of type Long to accommodate a large range of values.
    public Long getId() {
        return id;
    }
    // just for tests
    public void setId(Long id) {
        this.id = id;
    }

    private String name; // A field representing the name of the product. It's a simple String.
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    private String description; // A field for the product description, providing more details about the product.
    public String getDescription() {
        return description;
    }
    public void setDescription(String description) {
        this.description = description;
    }
    private BigDecimal price; // Represents the product price. BigDecimal is used for precise arithmetic, crucial for financial calculations.
    public BigDecimal getPrice() {
        return price;
    }
    public void setPrice(BigDecimal price) {
        this.price = price;
    }
    private int stockQuantity; // An integer representing the quantity of the product available in stock.
    public int getStockQuantity() {
        return stockQuantity;
    }
    public void setStockQuantity(int stockQuantity) {
        this.stockQuantity = stockQuantity;
    }

    // Getters and Setters would typically follow here to access and modify these fields.
}
